%runUCLAParadigm.m
%This is the main script for the experiment, adapted to run using UCLA TTL
%hardware.
%Plays combination of 40Hz sound, sweep or one of two words

% uiwait(msgbox(sprintf('* Please  turn  off  WI-FI or diable Dropbox \n\n * Make  sure  that  in  Control  Panel  under  USB  Controller  the  baudrate  is  set  to  115200'),'Get Ready','warn'));

%Start by removing anything you had left over in the memory:
clear all; close all; clc
KbName('UnifyKeyNames')
%RightChannel='Ones';  %'Ones' implies all values are 1
RightChannel='Stim';  %'Stim' implies that we send the same stimulus to
%both audio output channels

%UCLA TTL settings
location='UCLA';  %options: 'UCLA' or 'TLVMC', affecting hardware to use for TTL
portA = 0;
portB = 1;


%#################################################################
% Send TTLs though the DAQ hardware interface
% triggers = questdlg('Send TTLs?','TTLs status','Yes (recording session)','No (just playing)','Yes (recording session)');
% if triggers(1) == 'Y', triggers = 1; else triggers = 0; end
% if ~triggers, uiwait(msgbox('TTLs  will  *NOT*  be  sent - are you sure you want to continue?','TTLs','modal')); end
%################################################################
triggers = 0;


% define events
eventStartAudio = 100;
eventEndAudio   = 200;
eventResp       = 45;
event255        = 255;
eventreset      = 0;
ttlwait         = 0.01;
audioOnset      = 0;

%Get the params of the experiment:
params = getParamsUCLAParadigm;

%Initialising TTL hardware

if triggers && strcmp(location,'TLVMC')
    sio = serial(params.sio,'BaudRate',115200,'Terminator', []);
    fopen(sio);     %remember to close manually if you terminal execution early
    fwrite(sio,1); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.5);
    fwrite(sio,2); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.5);
    fwrite(sio,3); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.5);
    fwrite(sio,4); WaitSecs(ttlwait); fwrite(sio,eventreset);
end

if triggers && strcmp(location,'TLVMC') % mark the beginning of the experiment with four 255 triggers separated 100ms from each other
    fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.1);
    fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.1);
    fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.1);
    fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset);
end

% Initialize DAQ
if triggers && strcmp(location,'UCLA')
    dio=DaqDeviceIndex;                                     	            % get a handle for the USB-1208FS
    hwline=DaqDConfigPort(dio,0,0);                                         % configure digital port A for output
    DaqDOut(dio,portA,eventreset);
    hwline=DaqDConfigPort(dio,1,0);                          	            % configure digital port B for output
    DaqDOut(dio,portB,eventreset); laststim = 0;
end

if triggers && strcmp(location,'UCLA') % mark the beginning of the experiment with four 255 triggers separated 100ms from each other
     for i=1:4
         DaqDOut(dio,portA,event255); % send ?eventX' TTL (0-255)
         WaitSecs(ttlwait);
         DaqDOut(dio,portA,eventreset); % reset Daq interface
         WaitSecs(0.1);
     end
end


% Running on PTB-3? Abort otherwise.
AssertOpenGL;

debugMode=0;

if debugMode
    params.numTrials=10;
    params.numBlocks=1;
    params.numSilents=0;
end

subses=['S' num2str(params.subject) '_' num2str(params.session)];


timestamp = gettimestamp();
fid=createLogFileUCLAParadigm(params.defaultpath,subses,timestamp); % 10 fields
endlogline='\t\t\t\t\t\t\t\t\t\t\r\n';
copyfile(fullfile(params.defaultpath, 'runUCLAParadigm.m'),fullfile(params.defaultpath, '..', 'Logs', sprintf('runUCLAParadigm_%s_%s.m',timestamp,subses))); % copy code used for running to the log folder
copyfile(fullfile(params.defaultpath, 'getParamsUCLAParadigm.m'), fullfile(params.defaultpath, '..', 'Logs', sprintf('getParamsUCLAParadigm_%s_%s.m',timestamp,subses)))

[stimuli_words, WAVstimulus, stimArr] = load_stimuli(params, timestamp, subses);

% init audio
InitializePsychSound(1);
%      pahandle = PsychPortAudio('Open', [], [], 0, params.freq, params.audioChannels, 0);
% pahandle = PsychPortAudio('Open', [], [], 0, [], params.audioChannels, 0);
pahandle = PsychPortAudio('Open', 3, [], 2, params.freq, params.audioChannels, 0);

warning off
HideCursor

% FOR DEBUG ONLY (COMMENT OUT IF NOT DEBUGGING)
PsychDebugWindowConfiguration([0],[0.5])
% --------------------------------------------

rect = get(0, 'ScreenSize');
rect = [0 0 rect(3:4)];
win = Screen('OpenWindow',0,[0 0 0],rect);
Screen('TextSize',win, params.word_fontsize);
% win = Screen('OpenWindow', 0, [0 0 0], [50 50 640 480]);

% Screen(win,'TextSize',30);
% Screen('DrawText',win, intro_text, rect(3)/3, rect(4)/2,[255 255 255]);
% intro_img_read = imread('../intro_slide.jpg');
% intro_img = Screen('MakeTexture', win, intro_img_read, [], [], [], [], 0);
% Screen('DrawTexture', win, intro_img, [], [], 0);
% Screen('Flip',win);


% % % %      pahandle=initAudio(params.freq,params.vol,params.audioChannels);
%dintone=zeros(1,params.stimDur*params.freq);
%dintone(1:round(params.freq/100))=createTone(0.01,500,params.freq);%500Hz tone to send DIN for 10ms.
% #######################################3




%    ###############################################
%    MAIN LOOP
%    ------------------
%    ###############################################

cumTrial=0;
for block = 1:6
    DrawFormattedText2(['<size=' num2str(params.word_fontsize) '>Press a key when ready'], 'win', win, 'sx', 'center', 'sy', 'center', 'xalign', 'center', 'yalign', 'center', 'xlayout', 'center');
    
    % intro_img_read = imread('../intro_slide.jpg');
    % intro_img = Screen('MakeTexture', win, intro_img_read, [], [], [], [], 0);
    % Screen('DrawTexture', win, intro_img, [], [], 0);
    Screen('Flip',win);

    % Wait for a starting trigger ('t') from the MRI
    % t = KbName('5');
    % escKey = KbName('esc');
    t_pressed = false;
    while ~t_pressed
        [~, ~, keyCode] = KbCheck;
        if any(keyCode)
            t_pressed = true;
    %     elseif keyCode(escKey)
    %         DisableKeysForKbCheck([]);
    %         Screen('CloseAll');
    %         return
        end
    end
    if block == 1; grandStart = GetSecs; end
    params.block = block;
    if mod(block, 2) == 0
        params.block_type = 'auditory';
    else
        params.block_type = 'visual';
    end
    if triggers && strcmp(location,'TLVMC') % mark the beginning of a new block with four 255 triggers separated 200ms from each other
      fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.2);
      fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.2);
      fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset); WaitSecs(0.2);
      fwrite(sio,event255); WaitSecs(ttlwait); fwrite(sio,eventreset);
    elseif triggers && strcmp(location,'UCLA')
      for i=1:4
          DaqDOut(dio,portA,event255); % send ?eventX' TTL (0-255)
          WaitSecs(ttlwait);
          DaqDOut(dio,portA,eventreset); % reset Daq interface
          WaitSecs(0.2);
      end
    end

    % randomize trial list
    AudioTrialList=stimArr(randperm(length(stimArr)));
    VisualTrialList=randperm(length(stimuli_words));

    if strcmp(params.block_type, 'visual')
      run_visual_block(fid, stimuli_words, VisualTrialList, cumTrial, triggers, location, params.block, win, rect, params)
    elseif strcmp(params.block_type, 'auditory')
      run_auditory_block(fid, RightChannel, WAVstimulus, AudioTrialList, cumTrial, triggers, location, params.block, pahandle, params)
    end
end

% Close all
ShowCursor
Screen('CloseAll');
PsychPortAudio('Close', pahandle);
fprintf('Done\n')
