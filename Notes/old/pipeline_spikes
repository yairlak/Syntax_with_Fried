# Run from Raw/micro/

# 0. rename ncs files to CSC?.ncs
# Copy the following file to /CSC_mat folder and run it
Code/Utils/spike_sorting/get_channel_names.py 
# Copt the following to /ncs folder and run it
Code/Utils/spike_sorting/rename_channel_names_to_CSCs.py

# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# All the following steps should be run from the folder: /CSC_ncs
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

# 1. (optional) generate overview plots for raw signal
css-plot-rawsignal
# check new subfolder overview


# 2. extract spikes (not yet sorted) from all channels
css-extract --files *.ncs > css_extract.log
# new subfolder CSC were genereted with data_CSC*.h5 files

# 3. find artifacts
css-find-concurrent

# 4. remove artifacts
css-mask-artifacts

# 5. prepare for sorting
- Use css-plot-extracted to create plots of the spikes after artifact removal. These plots display the different artifact types, and also visualize cumulative spike counts.
- Next, prepare a job file (do_sort_pos.txt) by using css-overview-gui (Actions-->init from current folder and then  Actions->Save actions to file): this will generate the job file.
- (!!--important--!!) remove duplications in this job file (not clear why it happens). Make sure you have #channels lines in this file, without duplications, before you continue.
- Note that you can also prepare a job file for negative spikes (do_neg*.txt). For this, use css-overview-gui (toggle sort negative) to change the values in the corresponding channel rows. This will generate a second job file (do_sort_neg.txt). You would then need to repeat the step below TWICE, once for pos and once for neg. 

Run:
css-prepare-sorting --jobs do_sort_pos.txt
css-prepare-sorting --jobs do_sort_neg.txt --neg

# 6. Sorting
css-cluster --jobs sort_pos_yl2.txt  
css-cluster --jobs sort_neg_yl2.txt 

# 7. combine
css-combine --jobs sort_pos_yl2.txt 
css-combine --jobs sort_neg_yl2.txt

# 8. (optional) generate sorting plots
css-plot-sorted --label sort_pos_yl2
plot_sorted_CSC.py
# still get errors (skip this step)


# 9. (optional) Use the GUIs to optimize results
css-overview-gui
# enter the sorting label sort_pos_abc and initialize the folder (from the menu or by pressing Ctrl+I).

# 10. Manual fix:
css-gui


###########################################################################
# See alternative continuation for simple (without multiprocessing) - below
###########################################################################


# 5. Sorting 
python simple_clustering_CSCs.py 


# 6. generate sorting plots
css-plot-sorted --label sort_pos_simple
css-plot-sorted --label sort_neg_simple --neg
#plot_sorted_CSC.py





###################################################################################
# The following is buggy - uses multiprocessing instead of single, like the above.
###################################################################################
